@page "/forms/{Id:int}"
@using Blazor.Models
@using Microsoft.EntityFrameworkCore
@using System.Threading.Tasks
@rendermode InteractiveServer
@inject FormCustomizationContext DbContext

<PageTitle>Editing @form?.Name</PageTitle>
@if (form == null)
{
  <p><em>Loading...</em></p>
}
else
{
  <h1>Editing @form.Name</h1>
  <button type="button" class="btn btn-primary mb-3" @onclick="OnAdd">Add Input</button>
  <div class="mt-4 p-3 border rounded-3">
    <table class="table table-striped">
      <thead>
        <tr>
          <th>Id</th>
          <th>Label</th>
          <th>Type</th>
          <th>TypeOptions</th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        @foreach (var input in form.Inputs)
        {
          <tr>
            <th scope="row">@input.Id</th>
            <td>
              <div class="mb-3">
                <input type="text" class="form-control" id="@input.Id" value="@input.Label"
                  @onchange="(e) => OnLabelChange(e, input.Id)" />
              </div>
            </td>
            <td>
              <div class="mb-3">
                <InputTypeSelect Id="@input.Id" InputTypeId="@input.InputTypeId" InputTypeIdChanged="OnInputTypeChange" />
              </div>
            </td>
            <td>
              @if (input.InputType?.InputTypeOptions != null)
              {
                @foreach (var option in input.InputType.InputTypeOptions)
                {
                  <div>@option.Name</div>
                }
              }
            </td>
            <td>
              <button type="button" class="btn btn-danger" @onclick="() => OnDeleteInput(input.Id)">Delete</button>
            </td>
          </tr>
        }
      </tbody>
    </table>
  </div>
}

@code {
  [Parameter]
  public int Id { get; set; }

  private Form? form;
  private const int TextInputTypeId = 1;

  protected override async Task OnInitializedAsync()
  {
    form = await DbContext.Forms
    .Include(f => f.Inputs)
    .ThenInclude(i => i.InputType)
    .ThenInclude(it => it!.InputTypeOptions)
    .FirstOrDefaultAsync(f => f.Id == Id);
  }

  private async Task OnAdd()
  {
    var newInput = new Input
    {
      Label = "New Input",
      FormId = form!.Id,
      InputTypeId = 1
    };
    await DbContext.Inputs.AddAsync(newInput);
    await DbContext.SaveChangesAsync();
  }

  private async Task OnLabelChange(ChangeEventArgs e, int inputId)
  {
    if (form == null)
    {
      return;
    }

    var input = form.Inputs.FirstOrDefault(i => i.Id == inputId);
    if (input != null)
    {
      input.Label = e.Value?.ToString() ?? string.Empty;
      await DbContext.SaveChangesAsync();
    }
  }

  private async Task OnInputTypeChange(InputTypeSelect.InputTypeChangedEventArgs args)
  {
    if (form == null)
    {
      return;
    }

    var input = form.Inputs.FirstOrDefault(i => i.Id == args.InputId);
    if (input != null)
    {
      input.InputTypeId = args.InputTypeId;
      await DbContext.SaveChangesAsync();
    }
  }

  private async Task OnDeleteInput(int inputId)
  {
    if (form == null)
    {
      return;
    }

    var input = form.Inputs.FirstOrDefault(i => i.Id == inputId);
    if (input != null)
    {
      form.Inputs.Remove(input);
      await DbContext.SaveChangesAsync();
    }
  }

}