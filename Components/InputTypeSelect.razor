@using Blazor.Models
@using Microsoft.EntityFrameworkCore

@inject FormCustomizationContext DbContext
<select class="form-select" @onchange="OnChange">
  @foreach (var inputType in inputTypes)
  {
    @if (InputTypeId == inputType.Id)
    {
      <option selected value="@inputType.Id">@inputType.Name</option>
    }
    else
    {
      <option value="@inputType.Id">@inputType.Name</option>
    }
  }
</select>

@code {
  [Parameter]
  public int Id { get; set; }
  [Parameter]
  public int InputTypeId { get; set; }
  [Parameter]
  public EventCallback<InputTypeChangedEventArgs> InputTypeIdChanged { get; set; }

  private List<InputType> inputTypes = new List<InputType>();


  protected override async Task OnInitializedAsync()
  {
    inputTypes = await DbContext.InputTypes.ToListAsync();
  }

  public class InputTypeChangedEventArgs
  {
    public int InputTypeId { get; set; }
    public int InputId { get; set; }
  }

  private void OnChange(ChangeEventArgs e)
  {
    if (int.TryParse(e.Value?.ToString(), out int newInputTypeId))
    {
      InputTypeId = newInputTypeId;
      var args = new InputTypeChangedEventArgs
      {
        InputId = Id,
        InputTypeId = newInputTypeId
      };
      InputTypeIdChanged.InvokeAsync(args);
    }
  }

}